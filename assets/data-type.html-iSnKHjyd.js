import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as i,f as s,i as r,h as c,j as a,r as F,o as y,g as n}from"./app-B4QZWN77.js";const d="/assets/image-20250320145839024-CqrjdigF.png",u={};function m(g,l){const e=F("CodeTabs");return y(),i("div",null,[l[4]||(l[4]=s("figure",null,[s("img",{src:d,alt:"数据类型",tabindex:"0",loading:"lazy"}),s("figcaption",null,"数据类型")],-1)),l[5]||(l[5]=s("h2",{id:"_1-数字型-int-float",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-数字型-int-float"},[s("span",null,"1. 数字型 [int, float]")])],-1)),r(e,{id:"6",data:[{id:"int"},{id:"float"}]},{title0:a(({value:o,isActive:t})=>l[0]||(l[0]=[n("int")])),title1:a(({value:o,isActive:t})=>l[1]||(l[1]=[n("float")])),tab0:a(({value:o,isActive:t})=>l[2]||(l[2]=[s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python","data-title":"python",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"int_num "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," 1")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"t "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," type"),s("span",{style:{color:"#F8F8F2"}},"(int_num)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"(int_num)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},'"int num type is:>>>"'),s("span",{style:{color:"#F8F8F2"}},", t)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},'"直接检测数据类型，并输出：>>>"'),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"type"),s("span",{style:{color:"#F8F8F2"}},"(int_num))")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"#-------output-------")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#AE81FF"}},"1")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"int"),s("span",{style:{color:"#F8F8F2"}}," num "),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"type"),s("span",{style:{color:"#F92672"}}," is"),s("span",{style:{color:"#F8F8F2"}},":"),s("span",{style:{color:"#F92672"}},">>>"),s("span",{style:{color:"#F92672"}}," <"),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"class"),s("span",{style:{color:"#E6DB74"}}," 'int'"),s("span",{style:{color:"#F92672"}},">")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"直接检测数据类型，并输出："),s("span",{style:{color:"#F92672"}},">>>"),s("span",{style:{color:"#F92672"}}," <"),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"class"),s("span",{style:{color:"#E6DB74"}}," 'int'"),s("span",{style:{color:"#F92672"}},">")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:a(({value:o,isActive:t})=>l[3]||(l[3]=[s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python","data-title":"python",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"float_num "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," 1.5")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"t "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," type"),s("span",{style:{color:"#F8F8F2"}},"(float_num)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"(float_num)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},'"float num type is:>>>"'),s("span",{style:{color:"#F8F8F2"}},", t)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},'"直接检测数据类型，并输出：>>>"'),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"type"),s("span",{style:{color:"#F8F8F2"}},"(float_num))")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"#-------output-------")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#AE81FF"}},"1.5")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"float"),s("span",{style:{color:"#F8F8F2"}}," num "),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"type"),s("span",{style:{color:"#F92672"}}," is"),s("span",{style:{color:"#F8F8F2"}},":"),s("span",{style:{color:"#F92672"}},">>>"),s("span",{style:{color:"#F92672"}}," <"),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"class"),s("span",{style:{color:"#E6DB74"}}," 'float'"),s("span",{style:{color:"#F92672"}},">")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"直接检测数据类型，并输出："),s("span",{style:{color:"#F92672"}},">>>"),s("span",{style:{color:"#F92672"}}," <"),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"class"),s("span",{style:{color:"#E6DB74"}}," 'float'"),s("span",{style:{color:"#F92672"}},">")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),l[6]||(l[6]=c(`<h2 id="_2-字符串" tabindex="-1"><a class="header-anchor" href="#_2-字符串"><span>2. 字符串</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">string </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &quot;hello world&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">t </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> type</span><span style="color:#F8F8F2;">(string)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(string)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;string type is:&gt;&gt;&gt;&quot;</span><span style="color:#F8F8F2;">, t)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;直接检测数据类型，并输出：&gt;&gt;&gt;&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">(string))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#-------output-------</span></span>
<span class="line"><span style="color:#F8F8F2;">hello world</span></span>
<span class="line"><span style="color:#F8F8F2;">string </span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F92672;"> is</span><span style="color:#F8F8F2;">:</span><span style="color:#F92672;">&gt;&gt;&gt;</span><span style="color:#F92672;"> &lt;</span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#E6DB74;"> &#39;str&#39;</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">直接检测数据类型，并输出：</span><span style="color:#F92672;">&gt;&gt;&gt;</span><span style="color:#F92672;"> &lt;</span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#E6DB74;"> &#39;str&#39;</span><span style="color:#F92672;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>字符串的性质</strong></p><ol><li><p>有序性</p><ul><li>从左到右的索引方法，下标是从 0 开始；</li><li>从右到左的索引方法，下标是从 -1 开始；</li><li>引号里面出现的每个字符都算一个下标，空格也算。</li></ul></li><li><p>不可变性</p><p>不同的编程语言处理字符串的方式可能有所不同，但在大多数语言中，字符串都是不可变的，这意味着一旦创建，字符串的内容就不能改变。</p><div class="hint-container important"><p class="hint-container-title">重要</p><p>我们说的不可变，是指在代码运行过程中（如中间有 input ），不能对字符串修改、添加、删除之类的操作。</p></div></li><li><p>任意字符</p><ul><li>键盘上可以输入的字符，都可以是字符串的元素；</li><li>字符放到字符串中，都将成为字符串类型，即：里面的每一个元素都可以称为：子字符（子字符串）。</li></ul></li></ol><h2 id="_3-列表" tabindex="-1"><a class="header-anchor" href="#_3-列表"><span>3. 列表</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">lst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&quot;Hello World&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1.1</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&quot;look&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;book&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">11</span><span style="color:#F8F8F2;">), [</span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;汉堡包&quot;</span><span style="color:#F8F8F2;">], </span><span style="color:#AE81FF;">True</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">False</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">t </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> type</span><span style="color:#F8F8F2;">(lst)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(lst)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;lst type is:&gt;&gt;&gt;&quot;</span><span style="color:#F8F8F2;">, t)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;直接检测数据类型，并输出：&gt;&gt;&gt;&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">(lst))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#-------output-------</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#E6DB74;">&#39;Hello World&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1.1</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;look&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;book&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">11</span><span style="color:#F8F8F2;">), [</span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;汉堡包&#39;</span><span style="color:#F8F8F2;">], </span><span style="color:#AE81FF;">True</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">False</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">lst </span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F92672;"> is</span><span style="color:#F8F8F2;">:</span><span style="color:#F92672;">&gt;&gt;&gt;</span><span style="color:#F92672;"> &lt;</span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#E6DB74;"> &#39;list&#39;</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">直接检测数据类型，并输出：</span><span style="color:#F92672;">&gt;&gt;&gt;</span><span style="color:#F92672;"> &lt;</span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#E6DB74;"> &#39;list&#39;</span><span style="color:#F92672;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>列表的性质</strong></p><ol><li><p>有序性</p><ul><li><p>从左到右的索引方法，下标是从 0 开始；</p></li><li><p>从右到左的索引方法，下标是从 -1 开始；</p></li><li><p>列表里的每个元素算一个；</p><p>比如：lst = [“aiyuechuang”, 12];</p><p>上面 lst 有两个元素，下标分别是：</p><p>​ <code>aiyuechuang</code> 是下标 0 （从左到右）， 也是下标 -2 （从右到左）；</p><p>​ <code>12</code> 是下标 1 （从左到右）， 也是下标 -1 （从右到左）；</p></li></ul></li><li><p>可变性：在程序运行过程中（如中间有 input ），列表可以修改、添加、删除；</p></li><li><p>任意数据类型：<strong>指的是 Python 所拥有的数据类型</strong>。</p></li></ol><h2 id="_4-元组" tabindex="-1"><a class="header-anchor" href="#_4-元组"><span>4. 元组</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;aivc&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1.1</span><span style="color:#F8F8F2;">, [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#F8F8F2;">t </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> type</span><span style="color:#F8F8F2;">(tup)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(tup)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;tup type is: &gt;&gt;&gt;&quot;</span><span style="color:#F8F8F2;">, t)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;直接检测数据类型，并输出：&gt;&gt;&gt;&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">(tup))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#-------output-------</span></span>
<span class="line"><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;aivc&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1.1</span><span style="color:#F8F8F2;">, [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F92672;"> is</span><span style="color:#F8F8F2;">: </span><span style="color:#F92672;">&gt;&gt;&gt;</span><span style="color:#F92672;"> &lt;</span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#E6DB74;"> &#39;tuple&#39;</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">直接检测数据类型，并输出：</span><span style="color:#F92672;">&gt;&gt;&gt;</span><span style="color:#F92672;"> &lt;</span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#E6DB74;"> &#39;tuple&#39;</span><span style="color:#F92672;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>元组的性质</strong></p><ol><li><p>有序性</p><ul><li><p>从左到右的索引方法，下标是从 0 开始；</p></li><li><p>从右到左的索引方法，下标是从 -1 开始；</p></li><li><p>元组里的每个元素算一个；</p><p>比如：<code>tup = (&quot;aiyuechuang&quot;, 12)</code>;</p><p>上面 <code>tup</code>有两个元素，下标分别是：</p><p>​ <code>aiyuechuang</code> 是下标 0 （从左到右）， 也是下标 -2 （从右到左）；</p><p>​ <code>12</code> 是下标 1 （从左到右）， 也是下标 -1 （从右到左）；</p></li></ul></li><li><p>不可变性</p><p>元组被创建出来之后，就不能被改变；</p><div class="hint-container important"><p class="hint-container-title">重要</p><p>我们说的不可变，是指在代码运行过程中（如中间有 input ），不能对元组修改、添加、删除之类的操作。</p></div></li><li><p>任意数据类型：<strong>指的是 Python 所拥有的数据类型</strong>。</p></li></ol><h2 id="_5-列表-or-元组" tabindex="-1"><a class="header-anchor" href="#_5-列表-or-元组"><span>5. 列表 or 元组</span></a></h2><div class="hint-container info"><p class="hint-container-title">为什么有列表后还需要元组</p></div><ol><li>如果储存的数据或者数量是<strong>可变</strong>的，比如社交平台上的一个日志功能，是统计一个用户在一周之内看了哪些用户的帖子，那么用<strong>列表</strong>更合适（需要一个仓库管理员）；</li><li>如果储存的数据或者数量<strong>不变</strong>，比如一个系统/软件，用来返回一个地点的经纬度，然后直接传给用户看，那么选择<strong>元组</strong>更合适（不需要仓库管理员）。</li></ol>`,15))])}const h=p(u,[["render",m],["__file","data-type.html.vue"]]),b=JSON.parse(`{"path":"/programming/python/data-type.html","title":"初识数据类型","lang":"zh-CN","frontmatter":{"title":"初识数据类型","icon":"boke","date":"2025-03-20T14:46:33.000Z","author":"Ran","isOriginal":true,"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"description":"数据类型数据类型 1. 数字型 [int, float] 2. 字符串 字符串的性质 有序性 从左到右的索引方法，下标是从 0 开始； 从右到左的索引方法，下标是从 -1 开始； 引号里面出现的每个字符都算一个下标，空格也算。 不可变性 不同的编程语言处理字符串的方式可能有所不同，但在大多数语言中，字符串都是不可变的，这意味着一旦创建，字符串的内容就不...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/programming/python/data-type.html"}],["meta",{"property":"og:site_name","content":"Pythia’s Root"}],["meta",{"property":"og:title","content":"初识数据类型"}],["meta",{"property":"og:description","content":"数据类型数据类型 1. 数字型 [int, float] 2. 字符串 字符串的性质 有序性 从左到右的索引方法，下标是从 0 开始； 从右到左的索引方法，下标是从 -1 开始； 引号里面出现的每个字符都算一个下标，空格也算。 不可变性 不同的编程语言处理字符串的方式可能有所不同，但在大多数语言中，字符串都是不可变的，这意味着一旦创建，字符串的内容就不..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-20T08:01:34.000Z"}],["meta",{"property":"article:author","content":"Ran"}],["meta",{"property":"article:published_time","content":"2025-03-20T14:46:33.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-20T08:01:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"初识数据类型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-03-20T14:46:33.000Z\\",\\"dateModified\\":\\"2025-03-20T08:01:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ran\\"}]}"]]},"git":{"createdTime":1742453160000,"updatedTime":1742457694000,"contributors":[{"name":"AmaraMeng","username":"AmaraMeng","email":"ranmeng9558@gmail.com","commits":4,"url":"https://github.com/AmaraMeng"}]},"readingTime":{"minutes":3.57,"words":1070},"filePathRelative":"programming/python/data-type.md","localizedDate":"2025年3月20日","excerpt":"<figure><figcaption>数据类型</figcaption></figure>\\n<h2>1.  数字型 [int, float]</h2>\\n\\n<h2>2. 字符串</h2>\\n<div class=\\"language-python line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"python\\" data-title=\\"python\\" style=\\"background-color:#272822;color:#F8F8F2\\"><pre class=\\"shiki monokai vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#F8F8F2\\">string </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#E6DB74\\"> \\"hello world\\"</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">t </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#66D9EF;font-style:italic\\"> type</span><span style=\\"color:#F8F8F2\\">(string)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#66D9EF\\">print</span><span style=\\"color:#F8F8F2\\">(string)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#66D9EF\\">print</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#E6DB74\\">\\"string type is:&gt;&gt;&gt;\\"</span><span style=\\"color:#F8F8F2\\">, t)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#66D9EF\\">print</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#E6DB74\\">\\"直接检测数据类型，并输出：&gt;&gt;&gt;\\"</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#66D9EF;font-style:italic\\">type</span><span style=\\"color:#F8F8F2\\">(string))</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#88846F\\">#-------output-------</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">hello world</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">string </span><span style=\\"color:#66D9EF;font-style:italic\\">type</span><span style=\\"color:#F92672\\"> is</span><span style=\\"color:#F8F8F2\\">:</span><span style=\\"color:#F92672\\">&gt;&gt;&gt;</span><span style=\\"color:#F92672\\"> &lt;</span><span style=\\"color:#66D9EF;font-style:italic\\">class</span><span style=\\"color:#E6DB74\\"> 'str'</span><span style=\\"color:#F92672\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">直接检测数据类型，并输出：</span><span style=\\"color:#F92672\\">&gt;&gt;&gt;</span><span style=\\"color:#F92672\\"> &lt;</span><span style=\\"color:#66D9EF;font-style:italic\\">class</span><span style=\\"color:#E6DB74\\"> 'str'</span><span style=\\"color:#F92672\\">&gt;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{h as comp,b as data};

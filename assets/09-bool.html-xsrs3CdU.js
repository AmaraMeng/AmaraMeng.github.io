import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as l,o as p}from"./app-DZlcjXyL.js";const o="/assets/image-20250529142257421--EqIX7e2.png",e={};function t(F,s){return p(),a("div",null,s[0]||(s[0]=[l(`<h2 id="_1-条件判断-布尔值" tabindex="-1"><a class="header-anchor" href="#_1-条件判断-布尔值"><span>1. 条件判断（布尔值）</span></a></h2><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code class="language-python"><span class="line"><span style="color:#F8F8F2;">temperature </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 30</span></span>
<span class="line"><span style="color:#F8F8F2;">is_hot </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> temperature </span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> 25</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;Is it hot? </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">is_hot</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">weather </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;sunny&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">is_sunny </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (weather </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;sunny&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;Is it sunny? </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">is_sunny</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">should_go_swimming </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> is_hot </span><span style="color:#F92672;">and</span><span style="color:#F8F8F2;"> is_sunny</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;Should go swimming? </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">should_go_swimming</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#-------output-------</span></span>
<span class="line"><span style="color:#F8F8F2;">Is it hot</span><span style="color:#F44747;">?</span><span style="color:#AE81FF;"> True</span></span>
<span class="line"><span style="color:#F8F8F2;">Is it sunny</span><span style="color:#F44747;">?</span><span style="color:#AE81FF;"> True</span></span>
<span class="line"><span style="color:#F8F8F2;">Should go swimming</span><span style="color:#F44747;">?</span><span style="color:#AE81FF;"> True</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_2-布尔运算中的空" tabindex="-1"><a class="header-anchor" href="#_2-布尔运算中的空"><span>2. 布尔运算中的空</span></a></h2><p>在判断时，需要注意：</p><figure><img src="`+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>示例如下：</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code class="language-python"><span class="line"><span style="color:#88846F;"># 当做正常变量使用时，虽然数据是空的，但是都是原本的数据类型</span></span>
<span class="line"><span style="color:#F8F8F2;">string </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">dictionary </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {}</span></span>
<span class="line"><span style="color:#F8F8F2;">lst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ()</span></span>
<span class="line"><span style="color:#F8F8F2;">set_1 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> set</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;空字符串：&quot;</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">string</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;, type: </span><span style="color:#AE81FF;">{</span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">(string)</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;空字典：</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">dictionary</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">, type: </span><span style="color:#AE81FF;">{</span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">(dictionary)</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;空列表：</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">lst</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">, type: </span><span style="color:#AE81FF;">{</span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">(lst)</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;空元组：</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">tup</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">, type: </span><span style="color:#AE81FF;">{</span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">(tup)</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;空集合：</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">set_1</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">, type: </span><span style="color:#AE81FF;">{</span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">(set_1)</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 只有在布尔运算或者强制转换中，空序列等都会得到 False：</span></span>
<span class="line"><span style="color:#88846F;"># 以下为空数据结构通过 bool() 转换后的类型和值</span></span>
<span class="line"><span style="color:#F8F8F2;">string </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> bool</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;&#39;&#39; → type: </span><span style="color:#AE81FF;">{</span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">(string)</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">, value: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">string</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">dictionary </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> bool</span><span style="color:#F8F8F2;">({})</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;{{}} → type: </span><span style="color:#AE81FF;">{</span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">(dictionary)</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">, value: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">dictionary</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">lst </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> bool</span><span style="color:#F8F8F2;">([])</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;[] → type: </span><span style="color:#AE81FF;">{</span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">(lst)</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">, value: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">lst</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> bool</span><span style="color:#F8F8F2;">(())</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;() → type: </span><span style="color:#AE81FF;">{</span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">(tup)</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">, value: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">tup</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">set_1 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> bool</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">set</span><span style="color:#F8F8F2;">())</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;set() → type: </span><span style="color:#AE81FF;">{</span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">(set_1)</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">, value: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">set_1</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#-------output-------</span></span>
<span class="line"><span style="color:#F8F8F2;">空字符串：</span><span style="color:#E6DB74;">&quot;&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">: </span><span style="color:#F92672;">&lt;</span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#E6DB74;"> &#39;str&#39;</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">空字典：{}, </span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">: </span><span style="color:#F92672;">&lt;</span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#E6DB74;"> &#39;dict&#39;</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">空列表：[], </span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">: </span><span style="color:#F92672;">&lt;</span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#E6DB74;"> &#39;list&#39;</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">空元组：(), </span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">: </span><span style="color:#F92672;">&lt;</span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#E6DB74;"> &#39;tuple&#39;</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">空集合：</span><span style="color:#66D9EF;font-style:italic;">set</span><span style="color:#F8F8F2;">(), </span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">: </span><span style="color:#F92672;">&lt;</span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#E6DB74;"> &#39;set&#39;</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;"> → </span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">: </span><span style="color:#F92672;">&lt;</span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#E6DB74;"> &#39;bool&#39;</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;">, value: </span><span style="color:#AE81FF;">False</span></span>
<span class="line"><span style="color:#F8F8F2;">{} → </span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">: </span><span style="color:#F92672;">&lt;</span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#E6DB74;"> &#39;bool&#39;</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;">, value: </span><span style="color:#AE81FF;">False</span></span>
<span class="line"><span style="color:#F8F8F2;">[] → </span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">: </span><span style="color:#F92672;">&lt;</span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#E6DB74;"> &#39;bool&#39;</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;">, value: </span><span style="color:#AE81FF;">False</span></span>
<span class="line"><span style="color:#F8F8F2;">() → </span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">: </span><span style="color:#F92672;">&lt;</span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#E6DB74;"> &#39;bool&#39;</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;">, value: </span><span style="color:#AE81FF;">False</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">set</span><span style="color:#F8F8F2;">() → </span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">: </span><span style="color:#F92672;">&lt;</span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#E6DB74;"> &#39;bool&#39;</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;">, value: </span><span style="color:#AE81FF;">False</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_3-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_3-逻辑运算符"><span>3. 逻辑运算符</span></a></h2><p>逻辑运算只存在于布尔类型中。</p><p><code>and</code> 逻辑 “与”，当运算符两边的运算对象都为 True 时，结果为 True；</p><p><code>or</code> 逻辑“或”，当运算符两边的运算对象的其中一个为 True 时，结果为 True；</p><p><code>not</code> 逻辑“非”，用于反转运算对象的状态（一个运算对象即可）。</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code class="language-python"><span class="line"><span style="color:#F8F8F2;">In [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]: </span><span style="color:#F92672;">not</span><span style="color:#AE81FF;"> False</span></span>
<span class="line"><span style="color:#F8F8F2;">Out[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]: </span><span style="color:#AE81FF;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">In [</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">]: </span><span style="color:#F92672;">not</span><span style="color:#AE81FF;"> True</span></span>
<span class="line"><span style="color:#F8F8F2;">Out[</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">]: </span><span style="color:#AE81FF;">False</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">In [</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]: </span><span style="color:#F92672;">not</span><span style="color:#AE81FF;"> False</span><span style="color:#F92672;"> and</span><span style="color:#AE81FF;"> True</span><span style="color:#F92672;"> or</span><span style="color:#AE81FF;"> False</span></span>
<span class="line"><span style="color:#F8F8F2;">Out[</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]: </span><span style="color:#AE81FF;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">In [</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]: </span><span style="color:#F92672;">not</span><span style="color:#AE81FF;"> True</span><span style="color:#F92672;"> or</span><span style="color:#F92672;"> not</span><span style="color:#AE81FF;"> False</span></span>
<span class="line"><span style="color:#F8F8F2;">Out[</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]: </span><span style="color:#AE81FF;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">In [</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">]: </span><span style="color:#F92672;">not</span><span style="color:#AE81FF;"> True</span><span style="color:#F92672;"> or</span><span style="color:#AE81FF;"> False</span><span style="color:#F92672;"> and</span><span style="color:#AE81FF;"> True</span></span>
<span class="line"><span style="color:#F8F8F2;">Out[</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">]: </span><span style="color:#AE81FF;">False</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">In [</span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">]: (</span><span style="color:#F92672;">not</span><span style="color:#AE81FF;"> False</span><span style="color:#F92672;"> and</span><span style="color:#AE81FF;"> True</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">or</span><span style="color:#AE81FF;"> False</span></span>
<span class="line"><span style="color:#F8F8F2;">Out[</span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">]: </span><span style="color:#AE81FF;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">In [</span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">]: </span><span style="color:#F92672;">not</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">True</span><span style="color:#F92672;"> or</span><span style="color:#AE81FF;"> False</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">and</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">False</span><span style="color:#F92672;"> or</span><span style="color:#AE81FF;"> True</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">Out[</span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">]: </span><span style="color:#AE81FF;">False</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">In [</span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">]: </span><span style="color:#F92672;">not</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">True</span><span style="color:#F92672;"> and</span><span style="color:#AE81FF;">  False</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">and</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">False</span><span style="color:#F92672;"> or</span><span style="color:#AE81FF;"> True</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">Out[</span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">]: </span><span style="color:#AE81FF;">True</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><ul><li>逻辑运算符的优先级：not 优先于 and， 而 and 又高于 or。</li><li>短路求值：在 and 中，如果左侧为 False ，右侧不会被求值；在 or 中，如果左侧为 True，则右侧不会被求值。</li><li>通过加括号可以明确表达式的求值顺序，从而使代码更易读、更不容易出错。</li></ul><h2 id="_4-运算结果与短路求值" tabindex="-1"><a class="header-anchor" href="#_4-运算结果与短路求值"><span>4. 运算结果与短路求值</span></a></h2><table><thead><tr><th>3 and 5</th><th>True and True</th><th>True</th><th>5</th></tr></thead><tbody><tr><td><strong>3 or 5</strong></td><td><strong>True or True</strong></td><td><strong>True</strong></td><td><strong>3</strong></td></tr><tr><td><strong>0 or 5</strong></td><td><strong>False or True</strong></td><td><strong>True</strong></td><td><strong>5</strong></td></tr><tr><td><strong>3 and not 5</strong></td><td><strong>True and False</strong></td><td><strong>False</strong></td><td><strong>返回值为空</strong></td></tr></tbody></table><p>短路求值：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code class="language-python"><span class="line"><span style="color:#88846F;"># 如何证明出现了短路求值</span></span>
<span class="line"><span style="color:#88846F;"># 运行了 10/0 时会报错</span></span>
<span class="line"><span style="color:#88846F;"># print(10/0)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">True</span><span style="color:#F92672;"> or</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">10</span><span style="color:#F92672;">/</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#-------output-------</span></span>
<span class="line"><span style="color:#AE81FF;">True</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code class="language-python"><span class="line"><span style="color:#F8F8F2;">condition </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> False</span><span style="color:#F92672;"> or</span><span style="color:#66D9EF;"> print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;我被执行了！&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(condition)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#-------output-------</span></span>
<span class="line"><span style="color:#F8F8F2;">我被执行了！</span></span>
<span class="line"><span style="color:#AE81FF;">None</span><span style="color:#88846F;">       # 因为 print(&#39;我被执行了！&#39;) 是执行代码，没有返回值，所以 condition 输出了 None</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-表达式应用——条件测试" tabindex="-1"><a class="header-anchor" href="#_5-表达式应用——条件测试"><span>5. 表达式应用——条件测试</span></a></h2><p>在编程中，表达式常用于条件测试，帮助我们根据不同情况执行不同代码。常见应用场景包括：</p><ul><li>比较操作：检查一个变量是否等于或不等于某个特定值，或比较两个数字的大小。</li><li>成员资格测试：判断一个特定值是否存在于某个序列（如列表、字符串、元组）中。</li></ul><h3 id="_5-1-使用-and-检查多个条件" tabindex="-1"><a class="header-anchor" href="#_5-1-使用-and-检查多个条件"><span>5.1 使用 and 检查多个条件</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code class="language-python"><span class="line"><span style="color:#F8F8F2;">age_lilei </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 17</span></span>
<span class="line"><span style="color:#F8F8F2;">age_hanmeimei </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 18</span></span>
<span class="line"><span style="color:#F8F8F2;">result1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> age_lilei </span><span style="color:#F92672;">&gt;=</span><span style="color:#AE81FF;"> 18</span><span style="color:#F92672;"> and</span><span style="color:#F8F8F2;"> age_hanmeimei </span><span style="color:#F92672;">&gt;=</span><span style="color:#AE81FF;"> 18</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(result1)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">result2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> age_lilei </span><span style="color:#F92672;">&gt;=</span><span style="color:#AE81FF;"> 15</span><span style="color:#F92672;"> and</span><span style="color:#F8F8F2;"> age_hanmeimei </span><span style="color:#F92672;">&gt;=</span><span style="color:#AE81FF;"> 15</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(result2)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#-------output-------</span></span>
<span class="line"><span style="color:#AE81FF;">False</span></span>
<span class="line"><span style="color:#AE81FF;">True</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-使用-or-检查多个条件" tabindex="-1"><a class="header-anchor" href="#_5-2-使用-or-检查多个条件"><span>5.2 使用 or 检查多个条件</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code class="language-python"><span class="line"><span style="color:#F8F8F2;">age_lilei </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 17</span></span>
<span class="line"><span style="color:#F8F8F2;">age_hanmeimei </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 18</span></span>
<span class="line"><span style="color:#F8F8F2;">result1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> age_lilei </span><span style="color:#F92672;">&gt;=</span><span style="color:#AE81FF;"> 18</span><span style="color:#F92672;"> or</span><span style="color:#F8F8F2;"> age_hanmeimei </span><span style="color:#F92672;">&gt;=</span><span style="color:#AE81FF;"> 15</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(result1)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">result2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> age_lilei </span><span style="color:#F92672;">&gt;=</span><span style="color:#AE81FF;"> 20</span><span style="color:#F92672;"> or</span><span style="color:#F8F8F2;"> age_hanmeimei </span><span style="color:#F92672;">&gt;=</span><span style="color:#AE81FF;"> 20</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(result2)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#-------output-------</span></span>
<span class="line"><span style="color:#AE81FF;">True</span></span>
<span class="line"><span style="color:#AE81FF;">False</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26)]))}const i=n(e,[["render",t]]),y=JSON.parse(`{"path":"/programming/python/09-bool.html","title":"09. 布尔表达式","lang":"zh-CN","frontmatter":{"title":"09. 布尔表达式","icon":"boke","date":"2025-05-29T14:11:29.000Z","author":"Ran","isOriginal":true,"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"comment":true,"lastUpdated":true,"editLink":true,"backToTop":true,"toc":true,"description":"1. 条件判断（布尔值） 2. 布尔运算中的空 在判断时，需要注意： 示例如下： 3. 逻辑运算符 逻辑运算只存在于布尔类型中。 and 逻辑 “与”，当运算符两边的运算对象都为 True 时，结果为 True； or 逻辑“或”，当运算符两边的运算对象的其中一个为 True 时，结果为 True； not 逻辑“非”，用于反转运算对象的状态（一个运算...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"09. 布尔表达式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-05-29T14:11:29.000Z\\",\\"dateModified\\":\\"2025-05-29T08:02:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ran\\"}]}"],["meta",{"property":"og:url","content":"https://pythiaroot.com/programming/python/09-bool.html"}],["meta",{"property":"og:site_name","content":"Pythia’s Root"}],["meta",{"property":"og:title","content":"09. 布尔表达式"}],["meta",{"property":"og:description","content":"1. 条件判断（布尔值） 2. 布尔运算中的空 在判断时，需要注意： 示例如下： 3. 逻辑运算符 逻辑运算只存在于布尔类型中。 and 逻辑 “与”，当运算符两边的运算对象都为 True 时，结果为 True； or 逻辑“或”，当运算符两边的运算对象的其中一个为 True 时，结果为 True； not 逻辑“非”，用于反转运算对象的状态（一个运算..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-29T08:02:46.000Z"}],["meta",{"property":"article:author","content":"Ran"}],["meta",{"property":"article:published_time","content":"2025-05-29T14:11:29.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-29T08:02:46.000Z"}]]},"git":{"createdTime":1748505766000,"updatedTime":1748505766000,"contributors":[{"name":"AmaraMeng","username":"AmaraMeng","email":"ranmeng9558@gmail.com","commits":1,"url":"https://github.com/AmaraMeng"}],"changelog":[{"hash":"9d8363f051891fb384cd4aa02451f34375ba01a7","time":1748505766000,"email":"ranmeng9558@gmail.com","author":"AmaraMeng","message":"Add boolean expressions and if statements documentation"}]},"readingTime":{"minutes":3.05,"words":916},"filePathRelative":"programming/python/09-bool.md","excerpt":"<h2>1. 条件判断（布尔值）</h2>\\n<div class=\\"language-python line-numbers-mode has-collapsed-lines collapsed\\" data-highlighter=\\"shiki\\" data-ext=\\"python\\" style=\\"--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2\\"><pre class=\\"shiki monokai vp-code\\"><code class=\\"language-python\\"><span class=\\"line\\"><span style=\\"color:#F8F8F2\\">temperature </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#AE81FF\\"> 30</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">is_hot </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> temperature </span><span style=\\"color:#F92672\\">&gt;</span><span style=\\"color:#AE81FF\\"> 25</span></span>\\n<span class=\\"line\\"><span style=\\"color:#66D9EF\\">print</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#66D9EF;font-style:italic\\">f</span><span style=\\"color:#E6DB74\\">'Is it hot? </span><span style=\\"color:#AE81FF\\">{</span><span style=\\"color:#F8F8F2\\">is_hot</span><span style=\\"color:#AE81FF\\">}</span><span style=\\"color:#E6DB74\\">'</span><span style=\\"color:#F8F8F2\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">weather </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#E6DB74\\"> 'sunny'</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">is_sunny </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> (weather </span><span style=\\"color:#F92672\\">==</span><span style=\\"color:#E6DB74\\"> 'sunny'</span><span style=\\"color:#F8F8F2\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#66D9EF\\">print</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#66D9EF;font-style:italic\\">f</span><span style=\\"color:#E6DB74\\">'Is it sunny? </span><span style=\\"color:#AE81FF\\">{</span><span style=\\"color:#F8F8F2\\">is_sunny</span><span style=\\"color:#AE81FF\\">}</span><span style=\\"color:#E6DB74\\">'</span><span style=\\"color:#F8F8F2\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">should_go_swimming </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> is_hot </span><span style=\\"color:#F92672\\">and</span><span style=\\"color:#F8F8F2\\"> is_sunny</span></span>\\n<span class=\\"line\\"><span style=\\"color:#66D9EF\\">print</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#66D9EF;font-style:italic\\">f</span><span style=\\"color:#E6DB74\\">'Should go swimming? </span><span style=\\"color:#AE81FF\\">{</span><span style=\\"color:#F8F8F2\\">should_go_swimming</span><span style=\\"color:#AE81FF\\">}</span><span style=\\"color:#E6DB74\\">'</span><span style=\\"color:#F8F8F2\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#88846F\\">#-------output-------</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">Is it hot</span><span style=\\"color:#F44747\\">?</span><span style=\\"color:#AE81FF\\"> True</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">Is it sunny</span><span style=\\"color:#F44747\\">?</span><span style=\\"color:#AE81FF\\"> True</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">Should go swimming</span><span style=\\"color:#F44747\\">?</span><span style=\\"color:#AE81FF\\"> True</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div><div class=\\"collapsed-lines\\"></div></div>","autoDesc":true}`);export{i as comp,y as data};

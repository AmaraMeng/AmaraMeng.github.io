import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as l,o as e}from"./app-mJjlFrCn.js";const p={};function o(F,s){return e(),a("div",null,s[0]||(s[0]=[l(`<h2 id="_1-如何创建集合" tabindex="-1"><a class="header-anchor" href="#_1-如何创建集合"><span>1. 如何创建集合</span></a></h2><p>集合的创建主要有两种方式，可以看具体情况选择使用。</p><h3 id="_1-1-直接使用花括号-创建集合" tabindex="-1"><a class="header-anchor" href="#_1-1-直接使用花括号-创建集合"><span>1.1 直接使用花括号 <code>{}</code> 创建集合</span></a></h3><p>当我们知道集合中的元素时，可以直接使用花括号 <code>{}</code> 来定义集合。需要注意的是，集合中的元素是无序的，每次打印时显示的顺序可能不同。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">set</span><span style="color:#F92672;"> =</span><span style="color:#F8F8F2;"> {</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">set</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#-------output-------</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-使用-set-函数创建集合" tabindex="-1"><a class="header-anchor" href="#_1-2-使用-set-函数创建集合"><span>1.2 使用 <code>set()</code> 函数创建集合</span></a></h3><p>如果我们有一个列表或者其他可迭代对象，想要将其转化为集合，可以使用 <code>set()</code> 函数。这样做不仅可以创建集合，还能自动去除重复的元素。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">set1 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> set</span><span style="color:#F8F8F2;">([</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#F8F8F2;">set2 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> set</span><span style="color:#F8F8F2;">([</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(set1)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(set2)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#-------output-------</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-集合的交集" tabindex="-1"><a class="header-anchor" href="#_2-集合的交集"><span>2. 集合的交集</span></a></h2><p>交集（Intersection）：交集操作返回两个集合中都出现的元素，Python 中集合的交集使用 <code>&amp;</code> 运算符来实现。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">set1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">set2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(set1 </span><span style="color:#F92672;">&amp;</span><span style="color:#F8F8F2;"> set2)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#-------output-------</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-集合的并集" tabindex="-1"><a class="header-anchor" href="#_3-集合的并集"><span>3. 集合的并集</span></a></h2><p>并集（Union) ：并集操作返回两个集合中所有的元素，相同的元素只保留一次，可以使用 <code>|</code> 运算符来求并集。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">set1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">set2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(set1 </span><span style="color:#F92672;">|</span><span style="color:#F8F8F2;"> set2)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#-------output-------</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">basket1</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#E6DB74;">&#39;生花生&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;盐焗花生&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;蜂蜜花生&#39;</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">basket2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#E6DB74;">&#39;盐焗花生&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;香辣花生&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;烤花生&#39;</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">all_peanuts </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> basket1 </span><span style="color:#F92672;">|</span><span style="color:#F8F8F2;"> basket2</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(all_peanuts)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#-------output-------</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span><span style="color:#E6DB74;">&#39;烤花生&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;蜂蜜花生&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;生花生&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;香辣花生&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;盐焗花生&#39;</span><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-集合的差集" tabindex="-1"><a class="header-anchor" href="#_4-集合的差集"><span>4. 集合的差集</span></a></h2><p>差集（Difference）：差集操作返回存在于第一个集合中，但不存在于第二个集合中的元素，用 <code>-</code> 运算符实现差集运算。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">set1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">set2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(set1</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">set2)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">basket1</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#E6DB74;">&#39;生花生&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;盐焗花生&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;蜂蜜花生&#39;</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">basket2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#E6DB74;">&#39;盐焗花生&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;香辣花生&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;烤花生&#39;</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">unique_to_basket1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> basket1 </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> basket2</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(unique_to_basket1)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#-------output-------</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span><span style="color:#E6DB74;">&#39;生花生&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;蜂蜜花生&#39;</span><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18)]))}const r=n(p,[["render",o]]),i=JSON.parse('{"path":"/programming/python/08-set.html","title":"8. 集合","lang":"zh-CN","frontmatter":{"title":"8. 集合","icon":"boke","date":"2025-05-22T15:35:36.000Z","author":"Ran","isOriginal":true,"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"comment":true,"lastUpdated":true,"editLink":true,"backToTop":true,"toc":true,"description":"1. 如何创建集合 集合的创建主要有两种方式，可以看具体情况选择使用。 1.1 直接使用花括号 {} 创建集合 当我们知道集合中的元素时，可以直接使用花括号 {} 来定义集合。需要注意的是，集合中的元素是无序的，每次打印时显示的顺序可能不同。 1.2 使用 set() 函数创建集合 如果我们有一个列表或者其他可迭代对象，想要将其转化为集合，可以使用 s...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"8. 集合\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-05-22T15:35:36.000Z\\",\\"dateModified\\":\\"2025-05-23T04:11:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ran\\"}]}"],["meta",{"property":"og:url","content":"https://pythiaroot.com/programming/python/08-set.html"}],["meta",{"property":"og:site_name","content":"Pythia’s Root"}],["meta",{"property":"og:title","content":"8. 集合"}],["meta",{"property":"og:description","content":"1. 如何创建集合 集合的创建主要有两种方式，可以看具体情况选择使用。 1.1 直接使用花括号 {} 创建集合 当我们知道集合中的元素时，可以直接使用花括号 {} 来定义集合。需要注意的是，集合中的元素是无序的，每次打印时显示的顺序可能不同。 1.2 使用 set() 函数创建集合 如果我们有一个列表或者其他可迭代对象，想要将其转化为集合，可以使用 s..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-23T04:11:38.000Z"}],["meta",{"property":"article:author","content":"Ran"}],["meta",{"property":"article:published_time","content":"2025-05-22T15:35:36.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-23T04:11:38.000Z"}]]},"git":{"createdTime":1747973498000,"updatedTime":1747973498000,"contributors":[{"name":"AmaraMeng","username":"AmaraMeng","email":"ranmeng9558@gmail.com","commits":1,"url":"https://github.com/AmaraMeng"}],"changelog":[{"hash":"8415c75575ed0e6e5bcafaaac25cfce7ebd558d2","time":1747973498000,"email":"ranmeng9558@gmail.com","author":"AmaraMeng","message":"Add documentation for Python sets including creation, intersection, union, and difference operations"}]},"readingTime":{"minutes":1.79,"words":536},"filePathRelative":"programming/python/08-set.md","excerpt":"<h2>1. 如何创建集合</h2>\\n<p>集合的创建主要有两种方式，可以看具体情况选择使用。</p>\\n<h3>1.1 直接使用花括号 <code>{}</code> 创建集合</h3>\\n<p>当我们知道集合中的元素时，可以直接使用花括号 <code>{}</code> 来定义集合。需要注意的是，集合中的元素是无序的，每次打印时显示的顺序可能不同。</p>\\n<div class=\\"language-python line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"python\\" style=\\"background-color:#272822;color:#F8F8F2\\"><pre class=\\"shiki monokai vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#66D9EF;font-style:italic\\">set</span><span style=\\"color:#F92672\\"> =</span><span style=\\"color:#F8F8F2\\"> {</span><span style=\\"color:#AE81FF\\">1</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#AE81FF\\">2</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#AE81FF\\">4</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#AE81FF\\">5</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#AE81FF\\">8</span><span style=\\"color:#F8F8F2\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color:#66D9EF\\">print</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#66D9EF;font-style:italic\\">set</span><span style=\\"color:#F8F8F2\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#88846F\\">#-------output-------</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">{</span><span style=\\"color:#AE81FF\\">1</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#AE81FF\\">2</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#AE81FF\\">4</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#AE81FF\\">5</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#AE81FF\\">8</span><span style=\\"color:#F8F8F2\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{r as comp,i as data};

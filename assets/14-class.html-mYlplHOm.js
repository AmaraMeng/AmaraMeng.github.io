import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as l,o as e}from"./app-qOX-U99o.js";const p="/assets/image-20250807133509004-D9kIxplx.png",o="/assets/image-20250807140619593-OEdMI0-0.png",i="/assets/image-20250807150100511-C2_oYkp8.png",c="/assets/image-20250807150135498-nclluQw5.png",t="/assets/image-20250807153945373-G04E1nWH.png",r="/assets/image-20250807154105539-B88A-Wfb.png",F={};function d(y,s){return e(),a("div",null,s[0]||(s[0]=[l('<h2 id="_1-面向对象" tabindex="-1"><a class="header-anchor" href="#_1-面向对象"><span>1. 面向对象</span></a></h2><p>将程序任务涉及到的事物抽象为一个个的对象，以这些对象为中心来写程序。</p><h3 id="_1-1-什么是类" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是类"><span>1.1 什么是类？</span></a></h3><p><strong>类</strong> 和 <strong>实例</strong></p><p>物以类聚，人以群分</p><ul><li>狗是一类动物，具有相同、相似属性。（类）</li><li>两只狗，半斤和八两，出生后不会互相影响，彼此是独立的个体。（实例）</li><li>当类改变的时候，实例也会受到影响；但实例改变时，不会影响其他实例或者整个类。</li></ul><h3 id="_1-2-对象-你找到了吗" tabindex="-1"><a class="header-anchor" href="#_1-2-对象-你找到了吗"><span>1.2 对象，你找到了吗？</span></a></h3><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>下面是一段错误代码，<code>dog_x</code> 和 <code>cat_x</code> 分别是狗和猫的位置坐标，在检测到用户输入为 “move” 时，让猫和狗都前进 10 的长度。</li></ol><p>原代码如下，请修改：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code class="language-python"><span class="line"><span style="color:#F8F8F2;">dog_x </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F8F8F2;">cat_x </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> dog_move</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F8F8F2;">    dog_x </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> dog_x </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> cat_move</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F8F8F2;">    cat_x </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> cat_x </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">user_input </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> user_input </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;move&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    dog_move()</span></span>
<span class="line"><span style="color:#F8F8F2;">    cat_move()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>个人修改如下：</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code class="language-python"><span class="line"><span style="color:#F8F8F2;">dog_x </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F8F8F2;">cat_x </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> dog_move</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F92672;">    global</span><span style="color:#F8F8F2;"> dog_x</span></span>
<span class="line"><span style="color:#F8F8F2;">    dog_x </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> dog_x </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 10</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> dog_x</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> cat_move</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F92672;">    global</span><span style="color:#F8F8F2;"> cat_x</span></span>
<span class="line"><span style="color:#F8F8F2;">    cat_x </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> cat_x </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 10</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> cat_x</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">user_input </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> user_input </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;move&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;dog:</span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">, cat:</span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">.format(dog_x, cat_x))</span></span>
<span class="line"><span style="color:#F8F8F2;">    dog_move()</span></span>
<span class="line"><span style="color:#F8F8F2;">    cat_move()</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;dog:</span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">, cat:</span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">.format(dog_x, cat_x))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>复盘：</p><ul><li>为什么要加上 global？因为 <code>dog_x</code> 是全局变量，如果不加上 global，函数内的 <code>dog_x</code> 会被视为局部变量，无法修改全局变量的值。</li><li>return 可以不加，因为已经声明为全局变量了，后面输出可以直接使用。</li></ul><ol start="2"><li>下面是另一位同学的错误修改，请找出错误：</li></ol><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code class="language-python"><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> dog_move</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F8F8F2;">    dog_x </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F8F8F2;">    dog_x </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> dog_x </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 10</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> cat_move</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F8F8F2;">    cat_x </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F8F8F2;">    cat_x </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> cat_x </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 10</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">user_input </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;输入指令:&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> user_input </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;move&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;dog:</span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">, cat:</span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">.format(dog_x, cat_x))</span></span>
<span class="line"><span style="color:#F8F8F2;">    dog_move()</span></span>
<span class="line"><span style="color:#F8F8F2;">    cat_move()</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;dog:</span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">, cat:</span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">.format(dog_x, cat_x))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>错误一：局部变量在函数外不能使用；</p><p>错误二：每次调用函数，<code>dog_x</code> 和 <code>cat_x</code> 都会被重置为 0，因此每次调用函数的时候，输出结果都是 10，一直在原地踏步。</p><ol start="3"><li>现在，除了猫和狗，还要加一个大象，让它也像猫狗一样前进 10。注意：不要机械的写代码，要好好感受一下写代码的时候有什么情绪，这对后续对象的理解有帮助。</li></ol><p>感受：类似的东西在重复添加。我们上面定义了三个相似的函数，功能一样，只是<strong>变量</strong> 名称不一样，没必要创造这么多函数。例如：程序注册新用户，需要用户名、手机号、密码，那是不是要为每一个用户都创建一个函数来储存呢？</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code class="language-python"><span class="line"><span style="color:#88846F;"># 我们现在有三个用户要注册，每个用户都要填写用户名、手机号、密码</span></span>
<span class="line"><span style="color:#88846F;"># 如果我们不优化代码，那可能会像下面这样写：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> register_user1</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F8F8F2;">    username1 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入用户1的用户名：&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    phone1 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入用户1的手机号：&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    password1 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入用户1的密码：&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;用户1注册成功！用户名：</span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">，手机号：</span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">.format(username1, phone1))</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> register_user2</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F8F8F2;">    username2 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入用户2的用户名：&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    phone2 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入用户2的手机号：&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    password2 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入用户2的密码：&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;用户2注册成功！用户名：</span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">，手机号：</span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">.format(username2, phone2))</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> register_user3</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F8F8F2;">    username3 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入用户3的用户名：&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    phone3 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入用户3的手机号：&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    password3 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入用户3的密码：&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;用户3注册成功！用户名：</span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">，手机号：</span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">.format(username3, phone3))</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 现在我们要依次注册这三个用户</span></span>
<span class="line"><span style="color:#F8F8F2;">register_user1()</span></span>
<span class="line"><span style="color:#F8F8F2;">register_user2()</span></span>
<span class="line"><span style="color:#F8F8F2;">register_user3()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_2-一个例子-面向对象的方法" tabindex="-1"><a class="header-anchor" href="#_2-一个例子-面向对象的方法"><span>2. 一个例子：面向对象的方法</span></a></h2><h3 id="_2-1-面向对象代码框架" tabindex="-1"><a class="header-anchor" href="#_2-1-面向对象代码框架"><span>2.1 面向对象代码框架</span></a></h3><p>接下来，我们要使用面向对象的方法来实现前面动物听到用户输入指令 <code>move</code> 就往前跑的功能。</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code class="language-python"><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Animal</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.x </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> move</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.x </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.x </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">dog </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Animal()</span></span>
<span class="line"><span style="color:#F8F8F2;">cat </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Animal()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">user_input </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;输入指令：&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> user_input </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;move&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    dog.move()</span></span>
<span class="line"><span style="color:#F8F8F2;">    cat.move()</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Dog position:&#39;</span><span style="color:#F8F8F2;">, dog.x)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Cat position:&#39;</span><span style="color:#F8F8F2;">, cat.x)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>上述代码包含几个内容：</p><ul><li>类：一群有相似性的事物的集合，对应 Python 里的 class</li><li>对象：集合中的一个事物，对应 class 里生成的一个 object，比如代码中的 dog 和 cat。（其实就是上文提到的实例）</li><li>属性：对象的某个静态特征，是自身携带的，比如代码中的 x</li><li>函数：对象（实例）的某个动态能力，比如上述代码中的 <code>move()</code> 函数。</li></ul><figure><img src="`+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-2-init-self-函数" tabindex="-1"><a class="header-anchor" href="#_2-2-init-self-函数"><span>2.2 <code>_ _ init_ _(self)</code> 函数</span></a></h3><p>自动调用函数</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code class="language-python"><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Animal</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):                </span><span style="color:#88846F;"># 在一个对象生成时会被自动调用的函数</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.x </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>验证的代码如下：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code class="language-python"><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Animal</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;init function called&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span></span>
<span class="line"><span style="color:#F8F8F2;">dog </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Animal()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#-------output-------</span></span>
<span class="line"><span style="color:#F8F8F2;">init function called</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，没有调用 <code>_ _init_ _()</code> 这个函数，但是将 dog 定义在 Animal 这个类别里的时候自动运行了这个函数，即自动调用的函数。类似于一出生就自带的天赋技能。</p><p>例子一：创建游戏角色。</p><p>每个角色一出生就会自动拥有一些天赋技能，这些技能不是手动添加的，而是角色一出生系统就帮你准备好了。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code class="language-python"><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">GameCharacter</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;角色已创建，天赋技能已激活！&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">hero </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> GameCharacter()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#-------output-------</span></span>
<span class="line"><span style="color:#F8F8F2;">角色已创建，天赋技能已激活！</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例子二：</p><p>就像我们人类在一诞生的时候，没人教我们怎么呼吸、怎么让心脏跳动——这些能力是与生俱来的，是“出生那一刻就自动开始执行”的。Python 中的 <strong>init</strong> 方法（函数），就像“呼吸”和“心跳”一样。当我们创建一个新的对象（生命、实例化）时，它会自动执行，不需要我们手动去调用。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code class="language-python"><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Human</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;一个新生命诞生了，正在自动启动呼吸和心跳系统。&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">baby </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Human()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#-------output-------</span></span>
<span class="line"><span style="color:#F8F8F2;">一个新生命诞生了，正在自动启动呼吸和心跳系统。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-move-self-函数" tabindex="-1"><a class="header-anchor" href="#_2-3-move-self-函数"><span>2.3 <code>move(self)</code> 函数</span></a></h3><p><code>move(self)</code> 函数就是和我们前面将的基本函数的意思、功能是一样的。</p><p>只不过这里面是属于类里面的功能函数。</p><h3 id="_2-4-类当中的-self" tabindex="-1"><a class="header-anchor" href="#_2-4-类当中的-self"><span>2.4 类当中的 self</span></a></h3><h4 id="_2-4-1-非正式讲解1" tabindex="-1"><a class="header-anchor" href="#_2-4-1-非正式讲解1"><span>2.4.1 非正式讲解1</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code class="language-python"><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Animal</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.x </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> move</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.x </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.x </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">dog </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Animal()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> user_input </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;move&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    dog.move()</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Dog position:&#39;</span><span style="color:#F8F8F2;">, dog.x)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>self</code> 指的是本身，在 <code>Animal()</code> 内部，指的就是 <code>Animal()</code> ，当把 <code>Animal()</code> 赋值给 <code>dog</code> 时，<code>dog = Animal = self</code> 。</p><p>因此：</p><ul><li><code>self.x</code> → <code>Animal().x </code> → <code>dog.x</code> ，这也就解释了 <code>dog.x</code> 可以作为一个变量输出。</li><li>要调用 <code>Animal()</code> 里的函数，是 <code>Animal().move()</code> ，又因为上述的等价原因， <code>Animal().move()</code> = <code>dog.move()</code> 。</li><li>类里面的每个函数都要加上 <code>self</code> ，代表都属于类的一员，如同家族的族徽，代表都属于家族的一员。</li><li>有了 <code>self</code> 这个族徽，意味着家族的资源都可以互相使用。例如：家族的百万棋盘，所有家族成员都可以直接使用，如果不是同一家族的就得看情况了。所以当类里面存在变量，包括各个函数的变量，如果在变量的前面加上 <code>self(self.x)</code> ，则在类中，所有函数都可以随时调用变量 <code>self.x</code> ，在函数内外都可以访问。</li></ul><p>注意：</p><ul><li>在常规函数中，每个函数都是独立的。函数和函数之间的变量，不能互相调用，除非使用全局变量 <code>global</code> 来解决。</li><li>在类中的函数同理，也是独立的，函数与函数之间的变量依然不能直接共有，需要借助 <code>self</code> 来实现类里面的函数变量共用。</li></ul><p>这里给出一个类中没有使用 <code>self</code> 创建变量，导致无法相互调用的例子：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code class="language-python"><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Demo</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> function1</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        string </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;Hello World&#39;</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(string)</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> function2</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(string)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">demo </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Demo()</span></span>
<span class="line"><span style="color:#F8F8F2;">demo.function1()</span></span>
<span class="line"><span style="color:#F8F8F2;">demo.function2()     </span><span style="color:#88846F;"># 此处会报错 name &#39;string&#39; is not defined</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码加上 <code>self</code> 就可以了：</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code class="language-python"><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Demo</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> function1</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.string </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;Hello World&#39;</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.string)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> function2</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.string)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">demo </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Demo()</span></span>
<span class="line"><span style="color:#F8F8F2;">demo.function1()</span></span>
<span class="line"><span style="color:#F8F8F2;">demo.function2()  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#-------output-------</span></span>
<span class="line"><span style="color:#F8F8F2;">Hello World</span></span>
<span class="line"><span style="color:#F8F8F2;">Hello World</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="_2-4-2-非正式讲解2" tabindex="-1"><a class="header-anchor" href="#_2-4-2-非正式讲解2"><span>2.4.2 非正式讲解2</span></a></h4><figure><img src="`+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>**注意： **</p><p><strong>在类里面的函数，第一个参数都必须写 <code>self</code> !</strong></p><h4 id="_2-4-3-正式讲解-什么是-self" tabindex="-1"><a class="header-anchor" href="#_2-4-3-正式讲解-什么是-self"><span>2.4.3 正式讲解：什么是 self ？</span></a></h4><figure><img src="'+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-4-4-self-存在的意义" tabindex="-1"><a class="header-anchor" href="#_2-4-4-self-存在的意义"><span>2.4.4 self 存在的意义</span></a></h4><ul><li>原因一：代表自己</li><li>原因二：资源共享，没有 self 不能实现资源共享。</li></ul><p>以下代码可以看出，dog 和 self 实际为同一个变量：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code class="language-python"><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Animal</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.x </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;self address: </span><span style="color:#AE81FF;">{</span><span style="color:#FD971F;">self</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">dog </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Animal()</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;dog address: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">dog</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#-------output-------</span></span>
<span class="line"><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;"> address: </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">__main__.Animal </span><span style="color:#66D9EF;font-style:italic;">object</span><span style="color:#F8F8F2;"> at </span><span style="color:#66D9EF;font-style:italic;">0x</span><span style="color:#AE81FF;">000001FB0AC48F40</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">dog address: </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">__main__.Animal </span><span style="color:#66D9EF;font-style:italic;">object</span><span style="color:#F8F8F2;"> at </span><span style="color:#66D9EF;font-style:italic;">0x</span><span style="color:#AE81FF;">000001FB0AC48F40</span><span style="color:#F92672;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-init-初始化参数" tabindex="-1"><a class="header-anchor" href="#_2-5-init-初始化参数"><span>2.5 <code>_ _init_ _</code> 初始化参数</span></a></h3><h4 id="_2-5-1背景" tabindex="-1"><a class="header-anchor" href="#_2-5-1背景"><span>2.5.1背景</span></a></h4><p>类似宝宝出生前想名字</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code class="language-python"><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Baby</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E6DB74;">        初始化宝宝对象时，必须提供名字，</span></span>
<span class="line"><span style="color:#E6DB74;">        就像是大人提前为宝宝取好名字，并在必要时办理出生证明。</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> name    </span><span style="color:#88846F;"># 宝宝的名字，相当于出生证明中的名字</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> introduce</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E6DB74;">        宝宝的自我介绍，展示初始化时设置的属性</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;大家好，我叫</span><span style="color:#AE81FF;">{</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.name</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 宝宝出生前，大人为其取好了名字</span></span>
<span class="line"><span style="color:#F8F8F2;">baby1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Baby(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;棠棠&#39;</span><span style="color:#F8F8F2;">)    </span><span style="color:#88846F;"># 实例化</span></span>
<span class="line"><span style="color:#F8F8F2;">baby1.introduce()           </span><span style="color:#88846F;"># 输出介绍</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#-------output-------</span></span>
<span class="line"><span style="color:#F8F8F2;">大家好，我叫棠棠</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p><code>_ _init_ _</code> 函数的所有参数，全部在类的实例化时传入。即上述代码中的 <code>baby1 = Baby(name=&#39;棠棠&#39;) </code> 。</p><h4 id="_2-5-2-为什么要写-self-xxx-xxx-背后发生了什么" tabindex="-1"><a class="header-anchor" href="#_2-5-2-为什么要写-self-xxx-xxx-背后发生了什么"><span>2.5.2 为什么要写 <code>self.XXX = XXX</code> ？背后发生了什么？</span></a></h4><p>问题一：为什么传进参数 name，还要把 name 赋值给 <a href="http://self.name" target="_blank" rel="noopener noreferrer">self.name</a></p><p>问题二：为什么不直接 name = name ，还要用 self</p><p>问题三：为什么“点”后面的变量名称和参数同名，不同名可以吗？</p><p>回答一：从外面引入一个参数，需要找到一个地方存放，所以需要使用 <code>self.name = name</code> 进行存放。</p><p>回答二：并且，这个函数需要在类内的函数间共用，因此需要一个地方来存放这个共用的函数，并且加上 self 使其能共用</p><p>回答三：叫其他变量名可以，但是本身变量名是“见名知意”，且指代的是同一个东西，因此不需要再想一个合适的变量名。示例如下：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code class="language-python"><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Baby</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> name</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.username </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> name</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;init name: </span><span style="color:#AE81FF;">{</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.name</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">, username: </span><span style="color:#AE81FF;">{</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.username</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#F8F8F2;">baby1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Baby(</span><span style="color:#E6DB74;">&#39;棠棠&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#-------output-------</span></span>
<span class="line"><span style="color:#F8F8F2;">init name: 棠棠, username: 棠棠</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>小结：</p><figure><img src="`+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-5-3-参数设定后必须传入" tabindex="-1"><a class="header-anchor" href="#_2-5-3-参数设定后必须传入"><span>2.5.3 参数设定后必须传入</span></a></h4><p>在初始化时，如果设定了参数，那么将类实例化时必须将该参数传入，否则会报错。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code class="language-python"><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Baby</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> name</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.username </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> name</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;init name: </span><span style="color:#AE81FF;">{</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.name</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">, username: </span><span style="color:#AE81FF;">{</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.username</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">baby1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Baby()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#-------output-------</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">TypeError</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;">__init__</span><span style="color:#F8F8F2;">() missing </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> required positional argument: </span><span style="color:#E6DB74;">&#39;name&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-5-4-传入多个参数" tabindex="-1"><a class="header-anchor" href="#_2-5-4-传入多个参数"><span>2.5.4 传入多个参数</span></a></h4><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code class="language-python"><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Baby</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">gender</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> name</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.gender </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> gender</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> introduce</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;大家好，我叫 </span><span style="color:#AE81FF;">{</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.name</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">, 我是一个</span><span style="color:#AE81FF;">{</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.gender</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">宝宝。&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">baby1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Baby(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F92672;"> =</span><span style="color:#E6DB74;"> &#39;棠棠&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">gender</span><span style="color:#F92672;"> =</span><span style="color:#E6DB74;"> &#39;女&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">baby1.introduce()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">baby2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Baby(</span><span style="color:#E6DB74;">&#39;锦奕&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;男&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">baby2.introduce()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#-------output-------</span></span>
<span class="line"><span style="color:#F8F8F2;">大家好，我叫 棠棠, 我是一个女宝宝。</span></span>
<span class="line"><span style="color:#F8F8F2;">大家好，我叫 锦奕, 我是一个男宝宝。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="_2-5-5-设置默认值" tabindex="-1"><a class="header-anchor" href="#_2-5-5-设置默认值"><span>2.5.5 设置默认值</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code class="language-python"><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Baby</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F92672;"> =</span><span style="color:#E6DB74;"> &#39;小悦&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">gender</span><span style="color:#F92672;"> =</span><span style="color:#E6DB74;"> &#39;男&#39;</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;大家好，我叫</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">name</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">, 我是一个</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">gender</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">宝宝。&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">baby1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Baby()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#-------output-------</span></span>
<span class="line"><span style="color:#F8F8F2;">大家好，我叫小悦, 我是一个男宝宝。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置默认值的要求和函数一样，一旦设置了默认值，后面就必须都设置默认值，否则会报错。</p><p>默认值也可以设置为 <code>None</code> ，具体如何设置要看使用需求。</p><p>上述代码可以进一步优化：</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code class="language-python"><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Baby</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">gender</span><span style="color:#F92672;"> =</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> name</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.gender </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> gender</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> introduce</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.gender:</span></span>
<span class="line"><span style="color:#66D9EF;">            print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;大家好，我叫</span><span style="color:#AE81FF;">{</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.name</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">，是一个</span><span style="color:#AE81FF;">{</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.gender</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">宝宝。&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">            print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;大家好，我叫</span><span style="color:#AE81FF;">{</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.name</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">，性别待定。&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">baby1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Baby(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F92672;"> =</span><span style="color:#E6DB74;"> &#39;棠棠&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">gender</span><span style="color:#F92672;"> =</span><span style="color:#E6DB74;"> &#39;女&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">baby1.introduce()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">baby2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Baby(</span><span style="color:#E6DB74;">&#39;锦奕&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;男&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">baby2.introduce()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">baby3 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Baby(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F92672;"> =</span><span style="color:#E6DB74;"> &#39;宝宝&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">baby3.introduce()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#-------output-------</span></span>
<span class="line"><span style="color:#F8F8F2;">大家好，我叫棠棠，是一个女宝宝。</span></span>
<span class="line"><span style="color:#F8F8F2;">大家好，我叫锦奕，是一个男宝宝。</span></span>
<span class="line"><span style="color:#F8F8F2;">大家好，我叫宝宝，性别待定。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_2-6-类实例化时-指定传参数和位置传参" tabindex="-1"><a class="header-anchor" href="#_2-6-类实例化时-指定传参数和位置传参"><span>2.6 类实例化时：指定传参数和位置传参</span></a></h3><p>类的传入的三种原则：</p><ol><li><p>全部不指定参数</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code class="language-python"><span class="line"><span style="color:#F8F8F2;">baby1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Baby(</span><span style="color:#E6DB74;">&#39;棠棠&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;女&#39;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>全部指定参数</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code class="language-python"><span class="line"><span style="color:#F8F8F2;">baby1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Baby(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F92672;"> =</span><span style="color:#E6DB74;"> &#39;棠棠&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">gender</span><span style="color:#F92672;"> =</span><span style="color:#E6DB74;"> &#39;女&#39;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>部分指定参数，只能从前面不指定，一旦开始指定，后续参数都要指定，否则会报错。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code class="language-python"><span class="line"><span style="color:#F8F8F2;">baby1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Baby(</span><span style="color:#E6DB74;">&#39;棠棠&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">gender</span><span style="color:#F92672;"> =</span><span style="color:#E6DB74;"> &#39;女&#39;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>下述情况会报错：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code class="language-python"><span class="line"><span style="color:#F8F8F2;">baby1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Baby(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F92672;"> =</span><span style="color:#E6DB74;"> &#39;棠棠&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;女&#39;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol>`,96)]))}const m=n(F,[["render",d]]),b=JSON.parse('{"path":"/programming/python/14-class.html","title":"14. 类","lang":"zh-CN","frontmatter":{"title":"14. 类","icon":"boke","date":"2025-07-31T15:11:04.000Z","author":"Ran","isOriginal":true,"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"comment":true,"lastUpdated":true,"editLink":true,"backToTop":true,"toc":true,"description":"1. 面向对象 将程序任务涉及到的事物抽象为一个个的对象，以这些对象为中心来写程序。 1.1 什么是类？ 类 和 实例 物以类聚，人以群分 狗是一类动物，具有相同、相似属性。（类） 两只狗，半斤和八两，出生后不会互相影响，彼此是独立的个体。（实例） 当类改变的时候，实例也会受到影响；但实例改变时，不会影响其他实例或者整个类。 1.2 对象，你找到了吗？...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"14. 类\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-31T15:11:04.000Z\\",\\"dateModified\\":\\"2025-08-07T08:05:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ran\\"}]}"],["meta",{"property":"og:url","content":"https://pythiaroot.com/programming/python/14-class.html"}],["meta",{"property":"og:site_name","content":"Pythia’s Root"}],["meta",{"property":"og:title","content":"14. 类"}],["meta",{"property":"og:description","content":"1. 面向对象 将程序任务涉及到的事物抽象为一个个的对象，以这些对象为中心来写程序。 1.1 什么是类？ 类 和 实例 物以类聚，人以群分 狗是一类动物，具有相同、相似属性。（类） 两只狗，半斤和八两，出生后不会互相影响，彼此是独立的个体。（实例） 当类改变的时候，实例也会受到影响；但实例改变时，不会影响其他实例或者整个类。 1.2 对象，你找到了吗？..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-07T08:05:01.000Z"}],["meta",{"property":"article:author","content":"Ran"}],["meta",{"property":"article:published_time","content":"2025-07-31T15:11:04.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-07T08:05:01.000Z"}]]},"git":{"createdTime":1753948874000,"updatedTime":1754553901000,"contributors":[{"name":"AmaraMeng","username":"AmaraMeng","email":"ranmeng9558@gmail.com","commits":2,"url":"https://github.com/AmaraMeng"}],"changelog":[{"hash":"ec4e8047fe00011681a911f14f97844acac83394","time":1754553901000,"email":"ranmeng9558@gmail.com","author":"AmaraMeng","message":"Refactor code structure for improved readability and maintainability"},{"hash":"9cda3dc4b437c3c69b075a83c713462936a6de19","time":1753948874000,"email":"ranmeng9558@gmail.com","author":"AmaraMeng","message":"Add chapter on classes in Python, covering object-oriented programming concepts, class and instance definitions, and practical examples for animal movement simulation."}]},"readingTime":{"minutes":10.02,"words":3005},"filePathRelative":"programming/python/14-class.md","excerpt":"<h2>1. 面向对象</h2>\\n<p>将程序任务涉及到的事物抽象为一个个的对象，以这些对象为中心来写程序。</p>\\n<h3>1.1 什么是类？</h3>\\n<p><strong>类</strong> 和 <strong>实例</strong></p>\\n<p>物以类聚，人以群分</p>\\n<ul>\\n<li>狗是一类动物，具有相同、相似属性。（类）</li>\\n<li>两只狗，半斤和八两，出生后不会互相影响，彼此是独立的个体。（实例）</li>\\n<li>当类改变的时候，实例也会受到影响；但实例改变时，不会影响其他实例或者整个类。</li>\\n</ul>\\n<h3>1.2 对象，你找到了吗？</h3>\\n<figure><figcaption></figcaption></figure>","autoDesc":true}');export{m as comp,b as data};
